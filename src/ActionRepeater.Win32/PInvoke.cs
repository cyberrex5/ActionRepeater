using System;
using System.Runtime.InteropServices;
using System.Runtime.Versioning;
using ActionRepeater.Win32.Graphics;
using ActionRepeater.Win32.Input;
using ActionRepeater.Win32.Synch;
using ActionRepeater.Win32.WindowsAndMessages;

#pragma warning disable CA1401 // P/Invokes should not be visible
[assembly: SupportedOSPlatform("windows6.0.6000")]
namespace ActionRepeater.Win32;

// The vast majority of the stuff in ActionRepeater.Win32 is generated by CsWin32 and slightly modified

public static partial class PInvoke
{
    /// <inheritdoc cref="SendInput(uint, Span{INPUT}, int)"/>
    public static unsafe uint SendInput(Span<INPUT> pInputs) => SendInput((uint)pInputs.Length, pInputs, INPUT.SIZE);

    /// <summary>Synthesizes keystrokes, mouse motions, and button clicks.</summary>
    /// <returns>The number of events that it successfully inserted into the keyboard or mouse input stream. If the function returns zero, the input was already blocked by another thread. To get extended error information, call <see cref="Marshal.GetLastPInvokeError"/>. This function fails when it is blocked by UIPI. Note that neither <see cref="Marshal.GetLastPInvokeError"/> nor the return value will indicate the failure was caused by UIPI blocking.</returns>
    /// <remarks><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-sendinput">Learn more about this API from docs.microsoft.com</see>.</remarks>
    [LibraryImport("User32", SetLastError = true)]
    [DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
    public static unsafe partial uint SendInput(uint cInputs, Span<INPUT> pInputs, int cbSize);

    /// <summary>Translates (maps) a virtual-key code into a scan code or character value, or translates a scan code into a virtual-key code.</summary>
    /// <returns>Either a scan code, a virtual-key code, or a character value, depending on the value of <paramref name="uCode"/> and <paramref name="uMapType"/>. If there is no translation, the return value is <i>0</i> (zero).</returns>
    /// <remarks><see href="https://docs.microsoft.com/windows/win32/api/winuser/nf-winuser-mapvirtualkeyw">Learn more about this API from docs.microsoft.com</see>.</remarks>
    [LibraryImport("User32", EntryPoint = "MapVirtualKeyW")]
    [DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
    public static partial uint MapVirtualKey(uint uCode, VirtualKeyMapType uMapType);

    /// <summary>Retrieves the position of the mouse cursor, in screen coordinates.</summary>
    /// <returns>Returns nonzero if successful or zero otherwise. To get extended error information, call <see cref="Marshal.GetLastPInvokeError"/>.</returns>
    /// <remarks><see href="https://docs.microsoft.com/windows/win32/api/winuser/nf-winuser-getcursorpos">Learn more about this API from docs.microsoft.com</see>.</remarks>
    [LibraryImport("User32", SetLastError = true)]
    [DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
    [return: MarshalAs(UnmanagedType.Bool)]
    public static unsafe partial bool GetCursorPos(out POINT lpPoint);

    /// <summary>Returns the dots per inch (dpi) value for the associated window.</summary>
    /// <returns>The DPI for the window which depends on the <a href="https://docs.microsoft.com/windows/desktop/api/windef/ne-windef-dpi_awareness">DPI_AWARENESS</a> of the window. See the Remarks for more information. An invalid <i>hwnd</i> value will result in a return value of 0.</returns>
    /// <remarks><see href="https://docs.microsoft.com/windows/win32/api/winuser/nf-winuser-getdpiforwindow">Learn more about this API from docs.microsoft.com</see>.</remarks>
    [LibraryImport("User32")]
    [DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
    [SupportedOSPlatform("windows10.0.14393")]
    public static partial uint GetDpiForWindow(nint hwnd);

    /// <summary>Changes the size, position, and Z order of a child, pop-up, or top-level window. These windows are ordered according to their appearance on the screen. The topmost window receives the highest rank and is the first window in the Z order.</summary>
    /// <returns>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <see cref="Marshal.GetLastPInvokeError"/>.</returns>
    /// <remarks><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setwindowpos">Learn more about this API from docs.microsoft.com</see>.</remarks>
    [LibraryImport("User32", SetLastError = true)]
    [DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
    [return: MarshalAs(UnmanagedType.Bool)]
    public static partial bool SetWindowPos(nint hWnd, nint hWndInsertAfter, int X, int Y, int cx, int cy, SetWindowPosFlags uFlags);

    /// <inheritdoc cref="RegisterRawInputDevices"/>
    public static unsafe bool RegisterRawInputDevices(Span<RAWINPUTDEVICE> pRawInputDevices) => RegisterRawInputDevices(pRawInputDevices, (uint)pRawInputDevices.Length, (uint)RAWINPUTDEVICE.SIZE);

    /// <summary>Registers the devices that supply the raw input data.</summary>
    /// <returns><b>TRUE</b> if the function succeeds; otherwise, <b>FALSE</b>. If the function fails, call <see cref="Marshal.GetLastPInvokeError"/> for more information.</returns>
    /// <remarks><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-registerrawinputdevices">Learn more about this API from docs.microsoft.com</see>.</remarks>
    [LibraryImport("User32", SetLastError = true)]
    [DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
    [return: MarshalAs(UnmanagedType.Bool)]
    public static unsafe partial bool RegisterRawInputDevices(Span<RAWINPUTDEVICE> pRawInputDevices, uint uiNumDevices, uint cbSize);

    /// <summary>Calls the next handler in a window's subclass chain. The last handler in the subclass chain calls the original window procedure for the window.</summary>
    /// <returns>Type: <b>LRESULT</b>. The returned value is specific to the message sent. This value should be ignored.</returns>
    /// <remarks><see href="https://docs.microsoft.com/windows/win32/api//commctrl/nf-commctrl-defsubclassproc">Learn more about this API from docs.microsoft.com</see>.</remarks>
    [LibraryImport("ComCtl32")]
    [DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
    public static partial nint DefSubclassProc(nint hWnd, uint uMsg, nuint wParam, nint lParam);

    /// <summary>Installs or updates a window subclass callback.</summary>
    /// <returns><b>TRUE</b> if the subclass callback was successfully installed; otherwise, <b>FALSE</b>.</returns>
    /// <remarks><see href="https://docs.microsoft.com/windows/win32/api//commctrl/nf-commctrl-setwindowsubclass">Learn more about this API from docs.microsoft.com</see>.</remarks>
    [LibraryImport("ComCtl32")]
    [DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
    [return: MarshalAs(UnmanagedType.Bool)]
    public static partial bool SetWindowSubclass(nint hWnd, SUBCLASSPROC pfnSubclass, nuint uIdSubclass, nuint dwRefData);

    /// <summary>Removes a subclass callback from a window.</summary>
    /// <returns><b>TRUE</b> if the subclass callback was successfully removed; otherwise, <b>FALSE</b>.</returns>
    /// <remarks><see href="https://docs.microsoft.com/windows/win32/api//commctrl/nf-commctrl-removewindowsubclass">Learn more about this API from docs.microsoft.com</see>.</remarks>
    [LibraryImport("ComCtl32")]
    [DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
    [return: MarshalAs(UnmanagedType.Bool)]
    public static partial bool RemoveWindowSubclass(nint hWnd, SUBCLASSPROC pfnSubclass, nuint uIdSubclass);

    /// <summary>Calls the default window procedure to provide default processing for any window messages that an application does not process.</summary>
    /// <returns>Type: <b>LRESULT</b> The return value is the result of the message processing and depends on the message.</returns>
    /// <remarks><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-defwindowprocw">Learn more about this API from docs.microsoft.com</see>.</remarks>
    [LibraryImport("User32", EntryPoint = "DefWindowProcW")]
    [DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
    public static partial nint DefWindowProc(nint hWnd, uint Msg, nuint wParam, nint lParam);

    /// <summary>Retrieves the raw input from the specified device.</summary>
    /// <para>Type: <b>HRAWINPUT</b> A handle to the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-rawinput">RAWINPUT</a> structure. This comes from the <i>lParam</i> in <see cref="WindowMessage.INPUT"/>.</para>
    /// <returns><see langword="true"/> if successful, otherwise <see langword="false"/>.</returns>
    public static unsafe bool GetRawInputData(nint hRawInput, out RAWINPUT pData)
    {
        const uint RID_INPUT = 0x10000003u;
        uint rawInputSize = (uint)RAWINPUT.SIZE;
        fixed (RAWINPUT* pDataPtr = &pData)
        {
            return GetRawInputData(hRawInput, RID_INPUT, pDataPtr, &rawInputSize, (uint)RAWINPUTHEADER.SIZE) != unchecked((uint)-1);
        }
    }

    /// <summary>Retrieves the raw input from the specified device.</summary>
    /// <param name="hRawInput">
    /// <para>Type: <b>HRAWINPUT</b> A handle to the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-rawinput">RAWINPUT</a> structure. This comes from the <i>lParam</i> in <a href="https://docs.microsoft.com/windows/desktop/inputdev/wm-input">WM_INPUT</a>.</para>
    /// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getrawinputdata#parameters">Read more on docs.microsoft.com</see>.</para>
    /// </param>
    /// <param name="uiCommand">
    /// Type: <b>UINT</b> The command flag. This parameter can be one of the following values:
    /// <code>
    /// +-------------------------+---------------------------------------------------------+
    /// | RID_HEADER = 0x10000005u | Get the header information from the <see cref="RAWINPUT"/> structure. |
    /// +-------------------------+---------------------------------------------------------+
    /// | RID_INPUT = 0x10000003u  | Get the raw data from the <see cref="RAWINPUT"/> structure.           |
    /// +-------------------------+---------------------------------------------------------+
    /// </code>
    /// </param>
    /// <param name="pData">
    /// <para>Type: <b>LPVOID</b> A pointer to the data that comes from the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-rawinput">RAWINPUT</a> structure. This depends on the value of <i>uiCommand</i>. If <i>pData</i> is <b>NULL</b>, the required size of the buffer is returned in *<i>pcbSize</i>.</para>
    /// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getrawinputdata#parameters">Read more on docs.microsoft.com</see>.</para>
    /// </param>
    /// <param name="pcbSize">
    /// <para>Type: <b>PUINT</b> The size, in bytes, of the data in <i>pData</i>.</para>
    /// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getrawinputdata#parameters">Read more on docs.microsoft.com</see>.</para>
    /// </param>
    /// <param name="cbSizeHeader">
    /// <para>Type: <b>UINT</b> The size, in bytes, of the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-rawinputheader">RAWINPUTHEADER</a> structure.</para>
    /// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getrawinputdata#parameters">Read more on docs.microsoft.com</see>.</para>
    /// </param>
    /// <returns>
    /// <para>Type: <b>UINT</b> If <i>pData</i> is <b>NULL</b> and the function is successful, the return value is 0. If <i>pData</i> is not <b>NULL</b> and the function is successful, the return value is the number of bytes copied into pData. If there is an error, the return value is (<b>UINT</b>)-1.</para>
    /// </returns>
    /// <remarks>
    /// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getrawinputdata">Learn more about this API from docs.microsoft.com</see>.</para>
    /// </remarks>
    [LibraryImport("User32")]
    [DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
    public static unsafe partial uint GetRawInputData(nint hRawInput, uint uiCommand, void* pData, uint* pcbSize, uint cbSizeHeader);

    /// <summary>The EnumDisplayMonitors function enumerates display monitors (including invisible pseudo-monitors associated with the mirroring drivers) that intersect a region formed by the intersection of a specified clipping rectangle and the visible region of a device context. EnumDisplayMonitors calls an application-defined MonitorEnumProc callback function once for each monitor that is enumerated. Note that GetSystemMetrics (SM_CMONITORS) counts only the display monitors.</summary>
    /// <returns>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero.</returns>
    /// <remarks><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-enumdisplaymonitors">Learn more about this API from docs.microsoft.com</see>.</remarks>
    [LibraryImport("User32")]
    [DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
    [return: MarshalAs(UnmanagedType.Bool)]
    public static unsafe partial bool EnumDisplayMonitors(nint hdc, nint lprcClip, MONITORENUMPROC lpfnEnum, nint dwData);

    /// <summary>Sets the value of Desktop Window Manager (DWM) non-client rendering attributes for a window.</summary>
    /// <returns>If the function succeeds, it returns **S_OK**. Otherwise, it returns an **HRESULT** <see href="https://docs.microsoft.com/windows/desktop/com/com-error-codes-10">error code</see>. If Desktop Composition has been disabled (Windows 7 and earlier), then this function returns **DWM_E_COMPOSITIONDISABLED**.</returns>
    /// <remarks><see href="https://docs.microsoft.com/windows/win32/api//dwmapi/nf-dwmapi-dwmsetwindowattribute">Learn more about this API from docs.microsoft.com</see>./remarks>
    [LibraryImport("DwmApi")]
    [DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
    public static unsafe partial HResult DwmSetWindowAttribute(nint hwnd, uint dwAttribute, void* pvAttribute, uint cbAttribute);

    /// <summary>Retrieves or sets the value of one of the system-wide parameters.</summary>
    /// <returns>If the function succeeds, the return value is a nonzero value. If the function fails, the return value is zero. To get extended error information, call <see cref="Marshal.GetLastPInvokeError"/>.</returns>
    /// <remarks><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-systemparametersinfow">Learn more about this API from docs.microsoft.com</see>.</remarks>
    [LibraryImport("User32", EntryPoint = "SystemParametersInfoW", SetLastError = true)]
    [DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
    [return: MarshalAs(UnmanagedType.Bool)]
    public static unsafe partial bool SystemParametersInfo(SystemParameter uiAction, uint uiParam, void* pvParam, SystemParameterUpdateAction fWinIni);

    /// <summary>Retrieves the specified system metric or system configuration setting.</summary>
    /// <returns>If the function succeeds, the return value is the requested system metric or configuration setting. If the function fails, the return value is 0. <see cref="Marshal.GetLastPInvokeError"/> does not provide extended error information.</returns>
    /// <remarks><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getsystemmetrics">Learn more about this API from docs.microsoft.com</see>.</remarks>
    [LibraryImport("User32", SetLastError = true)]
    [DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
    public static partial int GetSystemMetrics(SystemMetric nIndex);

    /// <summary>Creates or opens a waitable timer object and returns a handle to the object.</summary>
    /// <returns>If the function succeeds, the return value is a handle to the timer object. If the named timer object exists before the function call, the function returns a handle to the existing object and <see cref="Marshal.GetLastPInvokeError"/> returns <b>ERROR_ALREADY_EXISTS</b>. If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="Marshal.GetLastPInvokeError"/>.</returns>
    /// <remarks><see href="https://docs.microsoft.com/windows/win32/api//synchapi/nf-synchapi-createwaitabletimerexw">Learn more about this API from docs.microsoft.com</see>.</remarks>
    [LibraryImport("Kernel32", EntryPoint = "CreateWaitableTimerExW", StringMarshalling = StringMarshalling.Utf16, SetLastError = true)]
    [DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
    public static unsafe partial nint CreateWaitableTimerEx(nint lpTimerAttributes, string? lpTimerName, WaitableTimerFlags dwFlags, AccessRights dwDesiredAccess);

    /// <summary>Activates the specified waitable timer. When the due time arrives, the timer is signaled and the thread that set the timer calls the optional completion routine.</summary>
    /// <returns>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <see cref="Marshal.GetLastPInvokeError"/>.</returns>
    /// <remarks><see href="https://docs.microsoft.com/windows/win32/api//synchapi/nf-synchapi-setwaitabletimer">Learn more about this API from docs.microsoft.com</see>.</remarks>
    [LibraryImport("Kernel32", SetLastError = true)]
    [DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
    [return: MarshalAs(UnmanagedType.Bool)]
    public static unsafe partial bool SetWaitableTimer(nint hTimer, long* lpDueTime, int lPeriod, PTIMERAPCROUTINE? pfnCompletionRoutine, void* lpArgToCompletionRoutine, [MarshalAs(UnmanagedType.Bool)] bool fResume);

    /// <summary>Waits until the specified object is in the signaled state or the time-out interval elapses.</summary>
    /// <returns>
    /// <para>If the function succeeds, the return value indicates the event that caused the function to return. It can be one of the following values. </para>
    /// <para>This doc was truncated.</para>
    /// </returns>
    /// <remarks><see href="https://docs.microsoft.com/windows/win32/api//synchapi/nf-synchapi-waitforsingleobject">Learn more about this API from docs.microsoft.com</see>.</remarks>
    [LibraryImport("Kernel32", SetLastError = true)]
    [DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
    public static partial WaitResult WaitForSingleObject(nint hHandle, uint dwMilliseconds);

    /// <summary>Closes an open object handle.</summary>
    /// <returns>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <see cref="Marshal.GetLastPInvokeError"/>. If the application is running under a debugger,  the function will throw an exception if it receives either a  handle value that is not valid  or a pseudo-handle value. This can happen if you close a handle twice, or if you  call <b>CloseHandle</b> on a handle returned by the <a href="https://docs.microsoft.com/windows/desktop/api/fileapi/nf-fileapi-findfirstfilea">FindFirstFile</a> function instead of calling the <a href="https://docs.microsoft.com/windows/desktop/api/fileapi/nf-fileapi-findclose">FindClose</a> function.</returns>
    /// <remarks><see href="https://docs.microsoft.com/windows/win32/api//handleapi/nf-handleapi-closehandle">Learn more about this API from docs.microsoft.com</see>.</remarks>
    [LibraryImport("Kernel32", SetLastError = true)]
    [DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
    [return: MarshalAs(UnmanagedType.Bool)]
    public static partial bool CloseHandle(nint hObject);

    /// <summary>Translates a character to the corresponding virtual-key code and shift state. The function translates the character using the input language and physical keyboard layout identified by the input locale identifier.</summary>
    [LibraryImport("USER32.dll", EntryPoint = "VkKeyScanExW", StringMarshalling = StringMarshalling.Utf16)]
    [DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
    public static partial short VkKeyScanEx(char ch, nint dwhkl);

    /// <summary>Retrieves the active input locale identifier (formerly called the keyboard layout).</summary>
    /// <param name="idThread">The identifier of the thread to query, or 0 for the current thread.</param>
    [LibraryImport("USER32.dll")]
    [DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
    public static partial nint GetKeyboardLayout(uint idThread);

    /// <summary>Retrieves the input locale identifiers (formerly called keyboard layout handles) corresponding to the current set of input locales in the system. The function copies the identifiers to the specified buffer.</summary>
    /// <returns>
    /// <para>Type: <b>int</b> If the function succeeds, the return value is the number of input locale identifiers copied to the buffer or, if <i>nBuff</i> is zero, the return value is the size, in array elements, of the buffer needed to receive all current input locale identifiers. If the function fails, the return value is zero. To get extended error information, call <a href="https://docs.microsoft.com/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
    /// </returns>
    [LibraryImport("USER32.dll", SetLastError = true)]
    [DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
    public static unsafe partial int GetKeyboardLayoutList(int nBuff, nint* lpList);
}
